<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HanSang Banetta Kim</title>
    <link>https://banetta.github.io/</link>
    <description>Recent content on HanSang Banetta Kim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <copyright>© {year} HanSang Banetta Kim</copyright>
    <lastBuildDate>Thu, 02 Sep 2021 00:44:17 +0900</lastBuildDate>
    
	<atom:link href="https://banetta.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Pandas] DataFrame 제어</title>
      <link>https://banetta.github.io/post/15_pandas_dataframe_control/</link>
      <pubDate>Thu, 02 Sep 2021 00:44:17 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/15_pandas_dataframe_control/</guid>
      <description>Json을 DataFrame으로 바꾸기 import numpy as np import pandas as pd import json with open(&#39;./data/student_json_column.json&#39;, &#39;r&#39;, encoding=&#39;utf8&#39;) as f: data_dict = json.load(f) # 잘 생각해보면 json 형식이 python의 dictionary와 유사함 print(data_dict) df = pd.DataFrame.from_dict(data_dict, orient=&#39;columns&#39;)  OpenAPI를 활용하여 Data를 가져와서 DataFrame으로 만들어보자 여기서는 OpenAPI를 사용하기 쉬운 영화진흥위원회 OpenAPI를 사용했다.
# 1. 필요한 module부터 import import numpy as np import pandas as pd import json import urllib # 2. 영화진흥위원회 Open API를 호출하기 위한 url이 필요 movie_url = &#39;http://www.</description>
    </item>
    
    <item>
      <title>[Pandas] Pandas</title>
      <link>https://banetta.github.io/post/14_pandas_basic/</link>
      <pubDate>Sun, 29 Aug 2021 01:26:50 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/14_pandas_basic/</guid>
      <description>Pandas Pandas는 고유하게 정의된 2개의 자료구조를 가지고 있다.
  Series : 1차원, 같은 데이터 타입을 사용 DataFrame : 2차원, 여러개의 Series를 합쳐서 Table 구조로 만든 자료구조   Series import numpy as np import pandas as pd # Series를 만들어보자 s = pd.Series([-1, 8, 10, 99], dtype=np.int32, index=[&#39;b&#39;, &#39;k&#39;, &#39;b&#39;, &#39;c&#39;]) print(s) # pandas는 index를 지정할 수 있다 print(s.values) # Series가 가지고 있는 값에 대한 ndarray만 추출 # [-1. 5.</description>
    </item>
    
    <item>
      <title>[Numpy] Numpy의 제어</title>
      <link>https://banetta.github.io/post/13_numpy_control/</link>
      <pubDate>Sun, 29 Aug 2021 00:36:45 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/13_numpy_control/</guid>
      <description>indexing &amp;amp; slicing python list의 indexing, slicing과 상당히 유사하다.
# indexing arr = np.arange(10,20,1) print(arr) for item in arr: print(item) for idx,item in enumerate(arr): print(idx, item) # 2차원 ndarray의 indexing arr = np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) print(arr) print(arr[1,2]) print(arr[2,:]) # 1차원의 ndarray가 결과로 나와요(view) print(arr[1:3,:]) # slicing arr = np.arange(0,5,1) print(arr) tmp = arr[0:3] print(tmp) arr[0] = 100 print(arr) print(tmp)  numpy의 ndarray에 대해서 slicing을 하면 view가 생성된다.
Boolean Indexing Boolean Indexing은 배열의 각 요소의 선택여부를 True,False로 구성된 Boolean Mask를 이용하여 지정하는 방식으로 Boolean Mask안에서 True로 지정된 요소만 indexing하는 방식.</description>
    </item>
    
    <item>
      <title>[Numpy] Shape</title>
      <link>https://banetta.github.io/post/12_numpy_shape/</link>
      <pubDate>Sat, 28 Aug 2021 23:43:13 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/12_numpy_shape/</guid>
      <description>reshape() a = [[1,2,3], [4,5,6]] # python의 중첩리스트 arr = np.array(a) # ndarray 생성 print(arr) print(arr.shape) # (2,3) arr.shape = (3,2) print(arr)  위의 예처럼 shape속성값을 직접 변경해서 shape을 변경시키는것은 좋지 않아요! 대신 제공된 다른 함수를 이용해서 이 작업을 진행해요!
arr = np.arange(0,12,1) print(arr) result = arr.reshape(4,3) # result는 ndarray가 아니예요! =&amp;gt; view # arr이 원본 result는 데이터를 가지고 있지 않아요! print(result) result[3,2] = 100 print(result) print(arr) arr = np.arange(0,12,1) print(arr) # 요소가 총 12개인 ndarray를 만들었어요!</description>
    </item>
    
    <item>
      <title>[Numpy] ndarray를 Random하게</title>
      <link>https://banetta.github.io/post/11_numpy_random/</link>
      <pubDate>Sat, 28 Aug 2021 23:31:15 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/11_numpy_random/</guid>
      <description>5가지 형태로 랜덤하게 ndarray를 생성할 수 있어요!
 np.random.normal() : 정규분포 확률밀도함수에서 실수 표본을 추출해서 ndarray를 생성하며 정규분포 그래프를 평균,표준편차 필요  mean = 50 std = 2 arr = np.random.normal(mean,std,(100000,)) print(arr) plt.hist(arr,bins=1000) plt.show() # 출력 결과 01  출력 결과 01 [48.08026042 50.64705142 50.89328134 &amp;hellip; 50.29764312 49.10224386 49.97381904]  np.random.rand(d1,d2,d3,...) : 0 이상 1미만의 균등분포 확률밀도함수에서 실수 표본을 추출해서 ndarray를 생성  arr = np.random.rand(100000) print(arr) plt.hist(arr,bins=100) plt.show() # 출력 결과 02  출력 결과 02 [0.</description>
    </item>
    
    <item>
      <title>[Numpy] Numpy</title>
      <link>https://banetta.github.io/post/10_numpy_basic/</link>
      <pubDate>Thu, 26 Aug 2021 19:48:22 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/10_numpy_basic/</guid>
      <description>Numpy Python의 Numpy는 Vector와 Matrix연산에 있어서 상당한 편의성을 제공하는 모듈로 Machine Learning과 Deep Learning의 기본 Module이다.
ndarray Numpy는 새로운 Data Type을 이용한다.
 기존 Python의 대표적인 Data Type
 list tuple range dict set    Ndarray의 특징
 python의 list와 상당히 유사하게 생겼어요! python의 list는 각기 다른 데이터 타입을 저장할 수 있어요! ex) a = [1, True, &amp;lsquo;Hello&amp;rsquo;, 3.14] ndarray는 동일한 데이터 타입만 사용할 수 있어요! list와 상당히 유사하지만 수학적 계산 속도면에서 비교가 불가능할 정도로 ndarray가 빠르고 효율적이예요   import numpy as np a = [1, 2, 3, 4] print(type(a)) # &amp;lt;class &#39;list&#39;&amp;gt; print(a) # []를 사용하고 원소의 구분을 ,로 해요!</description>
    </item>
    
    <item>
      <title>[Python] Exception and File Handling</title>
      <link>https://banetta.github.io/post/9_python_exception_and_file_handling/</link>
      <pubDate>Wed, 25 Aug 2021 22:55:05 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/9_python_exception_and_file_handling/</guid>
      <description>python의 Exception Handling (예외처리) 일반적으로 Programming 언어에서 사용되는 Error, Exception
 Error : 복구가 불가능한 예외적 상황으로 프로그램의 실행이 중단됨 Exception : 복구가 가능한 예외적인 상황으로 프로그램의 실행이 중단되지 않고 지속적인 수행이 가능  try: my_list = [&#39;1&#39;, &#39;2&#39;] my_sum = 100 + int(my_list[0]) except ZeroDivisionError: # 예외처리코드 - 오류를 극복해서 프로그램이 강제종료되지 않도록 처리 print(&#39;0으로 나눌수 없어요!&#39;) except IndexError: print(&#39;index 사용에 문제가 있어요!&#39;) except: print(&#39;예기치 않은 문제가 있어요!&#39;) finally: print(&#39;오류의 여부와 상관없이 무조건 실행&#39;)  python의 File 처리 실제로는 python의 순수 파일 처리는 너무 느리기에 대용량 처리에 적합하지 않아 사용되지 않는다.</description>
    </item>
    
    <item>
      <title>[SQL] SQL 기초</title>
      <link>https://banetta.github.io/post/8_sql_sql_basic/</link>
      <pubDate>Sun, 22 Aug 2021 19:45:01 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/8_sql_sql_basic/</guid>
      <description>SQL의 특징  대소문자를 구분하지 않는다. 관용적으로 키워드는 대문자를 이용한다. &amp;hellip;(추가 예정)  -- student table -- num	name	age	address -- 100	홍길동	20	서울 -- 101	김길동	30	송파구 -- 102	최길동	40	제주 -- 103	임길동	인천 -- Table 생성 CREATE TABLE student ( num VARCHAR(10) PRIMARY KEY, name VARCHAR(20) NOT NULL, age INT , address VARCHAR(30) NOT NULL ) DEFAULT CHARACTER SET utf8; -- Table 삭제 DROP TABLE student; -- Record 입력(1행 데이터를 입력해 보아요!</description>
    </item>
    
    <item>
      <title>[Python] Python의 Class</title>
      <link>https://banetta.github.io/post/7_python_object_class/</link>
      <pubDate>Tue, 17 Aug 2021 17:49:12 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/7_python_object_class/</guid>
      <description>객체지향 class
  객체 모델링의 수단 객체(instance)를 생성하기 위한 단위 ADT(Abstract Data Type)   class Car(object): # class variable example_var = 100 # initializer def __init__(self, maker, cc, price): self.maker = maker # property(속성) - instance variable self.cc = cc self.price = price # instance method def get_car_info(self): print(Car.example_var) return self.maker + str(self.cc) + str(self.price) car_1 = Car(&#39;kia&#39;, 1998, 10000) car_2 = Car(&#39;Hyundai&#39;, 2399, 20000)  class variable class가 저장되는 공간에 저장되었다가 이 class를 기반으로 instance가 생성되고 이 variable을 호출할 때 class 저장 공간에 접근해서 변수를 가져온다</description>
    </item>
    
    <item>
      <title>[Django] 패션 편집숍을 위한 사이트</title>
      <link>https://banetta.github.io/archives/django_fashion_online_shop/</link>
      <pubDate>Sat, 14 Aug 2021 21:06:42 +0900</pubDate>
      
      <guid>https://banetta.github.io/archives/django_fashion_online_shop/</guid>
      <description>프로젝트 주제 선정  작업 분할이 명확하게 구분 가능하고 짧은 픞로젝트 기간동안 완성할 수 있는 주제 중 온라인 쇼핑몰로 결정함 일반적인 쇼핑몰 보다 비교적 구조가 단순하고 깔끔한 사이트를 참고  프로젝트 일정 프로젝트 구성 환경 python, Django, javascript, mysql(docker), wsl2(ubuntu), pycharm, Naver Open API
프로젝트 기능   회원가입 / 로그인   게시판 및 상품페이지(SNS 공유)   </description>
    </item>
    
    <item>
      <title>[Python] 함수(Function)</title>
      <link>https://banetta.github.io/post/5_python_%ED%95%A8%EC%88%98function/</link>
      <pubDate>Wed, 14 Jul 2021 17:40:04 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/5_python_%ED%95%A8%EC%88%98function/</guid>
      <description>y = f(x)  특정 역할을 수행하는 코드 집합을 하나의 단위로 묶어놓은 것 입력값을 가지고 어떤 일을 수행한 다음에 그 결과물을 내어놓는 것   Python의 함수적 특징 1. 사용자 정의 함수 (User define function)  함수를 정의할 때 사용하는 keyword : def 함수명을 정의할 때 가독성이 있는 이름으로 정의해야한다.  숫자로 시작하면 안되고 대문자로 시작하지 않는다. 대문자로 시작하게 되면 Class를 지칭할 때와 겹치기 때문에 주의해야한다. _를 이용해서 의미를 구분해도 좋다 다른 특수기호는 쓰지 말것 함수 표현 : name_search, 클래스 표현 : NameSearch 다른 함수와 겹치지 않고 이미 사용하는 용어를 사용하지 않게 잘 지어야 한다.</description>
    </item>
    
    <item>
      <title>[Python] Control Statement 제어문</title>
      <link>https://banetta.github.io/post/4_python_control_statement/</link>
      <pubDate>Fri, 09 Jul 2021 16:52:09 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/4_python_control_statement/</guid>
      <description>조건문과 반복문  조건문 if의 형태 if a &amp;lt; 50: print(&amp;quot;smaller&amp;quot;) elif a &amp;lt; 100: print(&amp;quot;middle&amp;quot;) else: print(&amp;quot;bigger&amp;quot;)   반복문 for &amp;amp; while  for  반복하는 횟수를 알고 있거나 정해져 있을때 사용 일반적인 python의 for문 형태  for ~ in range(): {실행문} for ~ in {list, tuple, dict}: {실행문}   while  조건에 따라서 반복을 결정할 때 사용한다.  idx = 0 while idx &amp;lt; 10: print(&#39;haha&#39;) idx += 1 if idx &amp;gt; 5: break # bread : 가장 인접한 loop를 탈출하는 keyword   pass  공백, 반복문에서 아무것도 안하고 싶을 때 사용하며 일반적으로 비워두면 Python에서는 문법 오류가 난다.</description>
    </item>
    
    <item>
      <title>[Python] DataType</title>
      <link>https://banetta.github.io/post/3_python_datatype/</link>
      <pubDate>Tue, 06 Jul 2021 00:12:52 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/3_python_datatype/</guid>
      <description>변수의 생성과 삭제 # 변수의 생성과 삭제 a = 100 print(a) del a #print(a) # error 발생 &#39;&#39;&#39; --------------------------------------------------------------------------- NameError Traceback (most recent call last) &amp;lt;ipython-input-5-eb63b6d3deb5&amp;gt; in &amp;lt;module&amp;gt; 3 print(a) 4 del a ----&amp;gt; 5 print(a) NameError: name &#39;a&#39; is not defined &#39;&#39;&#39;  Data Type! Python에서 기본적으로 제공하는 built-in DataType으로 아래 6가지를 주로 많이 사용함
 1. Numeric(숫자형)
2. Sequence
3. Text Sequence
4. Dictionary
5. Set
6. Bool</description>
    </item>
    
    <item>
      <title>[Python] Comments 주석</title>
      <link>https://banetta.github.io/post/2_python_comments.md/</link>
      <pubDate>Mon, 05 Jul 2021 16:42:41 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/2_python_comments.md/</guid>
      <description>1. Python 주석의 종류  한줄 주석 #  # Python comments line print(&#39;comments example&#39;) # Comments   여러줄 주석 ```, &amp;quot;&amp;quot;&amp;quot;  &amp;quot;&amp;quot;&amp;quot; def test: print(&#39;이 블럭은 주석 처리되었습니다.&#39;) &amp;quot;&amp;quot;&amp;quot;  2. 주석 단축키   Windows : Ctrl + / Mac : Command + /   주석을 다는 단축키와 제거하는 단축키가 다른 경우가 있지만 거의 대부분의 IDE에서 비슷한 단축키를 사용한다.
3. 주석 사용 시 주의할점 Python은 Python의 특징 에서 언급한 것과 같이 들여쓰기가 굉장히 민감한 언어이다.</description>
    </item>
    
    <item>
      <title>[Python] Python 특징</title>
      <link>https://banetta.github.io/post/1_python_python_%ED%8A%B9%EC%A7%95.md/</link>
      <pubDate>Tue, 29 Jun 2021 16:46:41 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/1_python_python_%ED%8A%B9%EC%A7%95.md/</guid>
      <description>Python의 특징   Python은 인간다운 언어이다. 쉽고 간결하다 무료이지만 OpenSource의 강력함 Data Analysis에 유용한 Library가 많다. R에 비해서 범용적인 언어이다. 하위 호환성이 없다.   1. Python은 인간다운 언어이다. 프로그래밍은 생각하거나 원하는 것을 컴퓨터에 명령하는 행위라고 할 수 있다. 여기서 컴퓨터가 이해하기 좋은 저급언어와 사람이 컴퓨터에 명령을 내리기 쉽게 이해하기 편한 고급언어가 있다.    저급 언어 (Low-Level Language) 고급 언어 (High-Level Language)     기계 중심의 언어 사람 중심의 언어   실행 속도가 빠름 실행을 위해서는 기계어로 번역하는 과정이 필요함   상이한 기계마다 다른 코드를 가진다 상이한 기계에서 소스 수정 없이 실행이 가능하다.</description>
    </item>
    
    <item>
      <title>[Python] 머신러닝을 위한 기본 환경 세팅</title>
      <link>https://banetta.github.io/post/0_python_%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D%EC%9D%84_%EC%9C%84%ED%95%9C_%EA%B8%B0%EB%B3%B8_%ED%99%98%EA%B2%BD_%EC%84%B8%ED%8C%85.md/</link>
      <pubDate>Tue, 29 Jun 2021 15:30:14 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/0_python_%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D%EC%9D%84_%EC%9C%84%ED%95%9C_%EA%B8%B0%EB%B3%B8_%ED%99%98%EA%B2%BD_%EC%84%B8%ED%8C%85.md/</guid>
      <description>이 글은 멀티캠퍼스 K-Digital 융복합 프로젝트형 AI 서비스 개발 과정을 수강하면서 작성되었습니다.
개요 취업 준비를 위해서 국민 취업지원제도를 통해 직업훈련을 멀티캠퍼스를 통해서 받게 되었다. 과정은 &amp;lsquo;융복합 프로젝트형 AI 서비스 개발&#39;이다. 아무래도 AI 서비스 개발이다보니 머신러닝을 다루게 되고, 수업 초기에 기반교육으로 처음 시작한 부분이 바로 Python 프로그래밍이다. 수업 듣기 위해서 환경 세팅한 내용을 기록해둔다.
먼저 Python의 특징을 간단하게 요약하면
  쉽고 간결하다 Data Analysis 특화 Open Source R에 비해서 범용적인 언어 2020년 기준 가장 인기있는 언어중 하나 (github octoverse 통계) 하위 호환성이 없음 (2.</description>
    </item>
    
    <item>
      <title>[Web] kpu theater 영화 정보 서비스</title>
      <link>https://banetta.github.io/archives/web_kpu_theater/</link>
      <pubDate>Mon, 02 Dec 2019 18:23:27 +0900</pubDate>
      
      <guid>https://banetta.github.io/archives/web_kpu_theater/</guid>
      <description>팀원 KTT - Kpu Theater 영화 정보와 영화 리뷰를 제공하는 서비스로 JSP와 Servlet, tomcat을 이용하여 구현
메인 사용자 페이지 관리자 페이지 DB (User &amp;amp; Review) 동작 시나리오 프로젝트 진행 일정 서버 구성도</description>
    </item>
    
    <item>
      <title>[Java] 다자간 메신저 개발</title>
      <link>https://banetta.github.io/archives/java-%EB%8B%A4%EC%9E%90%EA%B0%84-%EB%A9%94%EC%8B%A0%EC%A0%80-%EA%B0%9C%EB%B0%9C.md/</link>
      <pubDate>Tue, 23 Jul 2019 00:31:05 +0900</pubDate>
      
      <guid>https://banetta.github.io/archives/java-%EB%8B%A4%EC%9E%90%EA%B0%84-%EB%A9%94%EC%8B%A0%EC%A0%80-%EA%B0%9C%EB%B0%9C.md/</guid>
      <description>팀 구성  Han Sang Banetta Kim - https://github.com/Banetta HS Yu https://github.com/yhs9420   주제 정의  다자간 메신저 (참고: 카카오, LINE, Whats App 등) 기본 개발 언어는 자바 인터넷 or 전화망 or 블루투스 활용 사용자 사용 환경은 Windows PC GUI Open source로 기 개발된 메신저 사용 불허   일정  10/30 (화) 팀구성 11/06 (화) 개발 시스템 아이디어 정의 문서 제출 (A4 2~3쪽) (10%) - 교수 평가 11/13 (화) 개발 시스템 아키텍처 정의 문서 제출 (A4 2~3쪽) (10%) - 교수 평가 12/04 (화) 개발 시스템 1차 데모 평가 (20%) - 동료 상호 평가 12/11 (화) 개발 시스템 2차 데모 평가(최종) (60%) - 동로 상호 평가   개발 시스템 아이디어 정의 메신저의 기본  Java를 기반으로 구동되는 다자간 메신저이며, 메신저 간의 네트워크 연결은 인터넷 IPv4 주소로 통신한다.</description>
    </item>
    
    <item>
      <title>[Elastic Stack] Apache 서버와 http를 이용한 hftp client와 서버 모니터링</title>
      <link>https://banetta.github.io/archives/elastic-stack_apache_file_transfer/</link>
      <pubDate>Wed, 12 Jun 2019 01:37:51 +0900</pubDate>
      
      <guid>https://banetta.github.io/archives/elastic-stack_apache_file_transfer/</guid>
      <description>팀원 팀장
김수혁 (https://github.com/suhyeokkim)
팀원
김한상 (https://github.com/banetta)
금기륜
정지윤 (https://github.com/jiyun-jiyun)
hftp client http를 이용하여 command를 입력받는 client를 통해 유사 ftp를 제공하는 서비스
팀에서 웹서버 및 모니터링 서버 구축 담당을 하였습니다.
서버 구성도
구현 결과 </description>
    </item>
    
    <item>
      <title>[OOP] 공항관리시스템</title>
      <link>https://banetta.github.io/archives/oop_kpu_airport_control_system.md/</link>
      <pubDate>Tue, 19 Jun 2018 15:15:18 +0900</pubDate>
      
      <guid>https://banetta.github.io/archives/oop_kpu_airport_control_system.md/</guid>
      <description>kpu_airport_control_system
2018년도 1학기 객체지향언어 팀 프로젝트 프로젝트명 : 공항관리시스템 팀명 : 공대생 팀원
  임현성 (Lim HS) 학번 : 2015150031 팀장 스케쥴 관리 담당 C++ 코딩 (User, Leavelist, Entrylist, Blacklist)
  김한상 (Han Sang Banetta Kim) banetion@gmail.com 학번 : 2013154012 Java Poting 담당 C++ 코딩 (Main, Main_Func, TRiFF, RFID)
  유현승 (Yoo HS) 학번 : 2015152024 C++ 코딩 (Flight Schedule, Control Tower, Ticket)
  류무원 학번 : 2017154013 C++ 코딩 (Entry item, Leaveitem item)</description>
    </item>
    
  </channel>
</rss>