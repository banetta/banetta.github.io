<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Anaconda on HanSang Banetta Kim</title>
    <link>https://banetta.github.io/tags/anaconda/</link>
    <description>Recent content in Anaconda on HanSang Banetta Kim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <copyright>© {year} HanSang Banetta Kim</copyright>
    <lastBuildDate>Sun, 29 Aug 2021 00:36:45 +0900</lastBuildDate>
    
	<atom:link href="https://banetta.github.io/tags/anaconda/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Numpy] Numpy의 제어</title>
      <link>https://banetta.github.io/post/13_numpy_control/</link>
      <pubDate>Sun, 29 Aug 2021 00:36:45 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/13_numpy_control/</guid>
      <description>indexing &amp;amp; slicing python list의 indexing, slicing과 상당히 유사하다.
# indexing arr = np.arange(10,20,1) print(arr) for item in arr: print(item) for idx,item in enumerate(arr): print(idx, item) # 2차원 ndarray의 indexing arr = np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) print(arr) print(arr[1,2]) print(arr[2,:]) # 1차원의 ndarray가 결과로 나와요(view) print(arr[1:3,:]) # slicing arr = np.arange(0,5,1) print(arr) tmp = arr[0:3] print(tmp) arr[0] = 100 print(arr) print(tmp)  numpy의 ndarray에 대해서 slicing을 하면 view가 생성된다.
Boolean Indexing Boolean Indexing은 배열의 각 요소의 선택여부를 True,False로 구성된 Boolean Mask를 이용하여 지정하는 방식으로 Boolean Mask안에서 True로 지정된 요소만 indexing하는 방식.</description>
    </item>
    
    <item>
      <title>[Numpy] Shape</title>
      <link>https://banetta.github.io/post/12_numpy_shape/</link>
      <pubDate>Sat, 28 Aug 2021 23:43:13 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/12_numpy_shape/</guid>
      <description>reshape() a = [[1,2,3], [4,5,6]] # python의 중첩리스트 arr = np.array(a) # ndarray 생성 print(arr) print(arr.shape) # (2,3) arr.shape = (3,2) print(arr)  위의 예처럼 shape속성값을 직접 변경해서 shape을 변경시키는것은 좋지 않아요! 대신 제공된 다른 함수를 이용해서 이 작업을 진행해요!
arr = np.arange(0,12,1) print(arr) result = arr.reshape(4,3) # result는 ndarray가 아니예요! =&amp;gt; view # arr이 원본 result는 데이터를 가지고 있지 않아요! print(result) result[3,2] = 100 print(result) print(arr) arr = np.arange(0,12,1) print(arr) # 요소가 총 12개인 ndarray를 만들었어요!</description>
    </item>
    
    <item>
      <title>[Numpy] ndarray를 Random하게</title>
      <link>https://banetta.github.io/post/11_numpy_random/</link>
      <pubDate>Sat, 28 Aug 2021 23:31:15 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/11_numpy_random/</guid>
      <description>5가지 형태로 랜덤하게 ndarray를 생성할 수 있어요!
 np.random.normal() : 정규분포 확률밀도함수에서 실수 표본을 추출해서 ndarray를 생성하며 정규분포 그래프를 평균,표준편차 필요  mean = 50 std = 2 arr = np.random.normal(mean,std,(100000,)) print(arr) plt.hist(arr,bins=1000) plt.show() # 출력 결과 01  출력 결과 01 [48.08026042 50.64705142 50.89328134 &amp;hellip; 50.29764312 49.10224386 49.97381904]  np.random.rand(d1,d2,d3,...) : 0 이상 1미만의 균등분포 확률밀도함수에서 실수 표본을 추출해서 ndarray를 생성  arr = np.random.rand(100000) print(arr) plt.hist(arr,bins=100) plt.show() # 출력 결과 02  출력 결과 02 [0.</description>
    </item>
    
    <item>
      <title>[Numpy] Numpy</title>
      <link>https://banetta.github.io/post/10_numpy_basic/</link>
      <pubDate>Thu, 26 Aug 2021 19:48:22 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/10_numpy_basic/</guid>
      <description>Numpy Python의 Numpy는 Vector와 Matrix연산에 있어서 상당한 편의성을 제공하는 모듈로 Machine Learning과 Deep Learning의 기본 Module이다.
ndarray Numpy는 새로운 Data Type을 이용한다.
 기존 Python의 대표적인 Data Type
 list tuple range dict set    Ndarray의 특징
 python의 list와 상당히 유사하게 생겼어요! python의 list는 각기 다른 데이터 타입을 저장할 수 있어요! ex) a = [1, True, &amp;lsquo;Hello&amp;rsquo;, 3.14] ndarray는 동일한 데이터 타입만 사용할 수 있어요! list와 상당히 유사하지만 수학적 계산 속도면에서 비교가 불가능할 정도로 ndarray가 빠르고 효율적이예요   import numpy as np a = [1, 2, 3, 4] print(type(a)) # &amp;lt;class &#39;list&#39;&amp;gt; print(a) # []를 사용하고 원소의 구분을 ,로 해요!</description>
    </item>
    
    <item>
      <title>[Python] 머신러닝을 위한 기본 환경 세팅</title>
      <link>https://banetta.github.io/post/0_python_%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D%EC%9D%84_%EC%9C%84%ED%95%9C_%EA%B8%B0%EB%B3%B8_%ED%99%98%EA%B2%BD_%EC%84%B8%ED%8C%85.md/</link>
      <pubDate>Tue, 29 Jun 2021 15:30:14 +0900</pubDate>
      
      <guid>https://banetta.github.io/post/0_python_%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D%EC%9D%84_%EC%9C%84%ED%95%9C_%EA%B8%B0%EB%B3%B8_%ED%99%98%EA%B2%BD_%EC%84%B8%ED%8C%85.md/</guid>
      <description>이 글은 멀티캠퍼스 K-Digital 융복합 프로젝트형 AI 서비스 개발 과정을 수강하면서 작성되었습니다.
개요 취업 준비를 위해서 국민 취업지원제도를 통해 직업훈련을 멀티캠퍼스를 통해서 받게 되었다. 과정은 &amp;lsquo;융복합 프로젝트형 AI 서비스 개발&#39;이다. 아무래도 AI 서비스 개발이다보니 머신러닝을 다루게 되고, 수업 초기에 기반교육으로 처음 시작한 부분이 바로 Python 프로그래밍이다. 수업 듣기 위해서 환경 세팅한 내용을 기록해둔다.
먼저 Python의 특징을 간단하게 요약하면
  쉽고 간결하다 Data Analysis 특화 Open Source R에 비해서 범용적인 언어 2020년 기준 가장 인기있는 언어중 하나 (github octoverse 통계) 하위 호환성이 없음 (2.</description>
    </item>
    
  </channel>
</rss>